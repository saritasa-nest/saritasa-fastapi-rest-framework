[tool.poetry]
name = "fastapi-rest-framework"
version = "0.1.0"
description = "Framework For FastApi Inspired By DRF"
authors = [
  "Saritasa <pypi@saritasa.com>",
]
maintainers = [
    "Stanislav Khlud <stanislav.khlud@saritasa.com>",
]
homepage = "https://pypi.org/project/saritasa-fastapi-rest-framework/"
repository = "https://github.com/saritasa-nest/saritasa-fastapi-rest-framework/"
keywords = [
  "python",
  "fastapi",
  "sqlachemy"
]
license = "MIT"
readme = "README.md"
packages = [
  { include = "fastapi_rest_framework" }
]

classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.plugins.pytest11]
fastapi_rest_framework = "fastapi_rest_framework.testing.plugin"

[tool.poetry.dependencies]
python = "^3.11"
# FastAPI framework, high performance, easy to learn, fast to code, ready for production
# https://fastapi.tiangolo.com/
fastapi = "<1"
# PyJWT is a Python library which allows you to encode and decode JSON Web
# Tokens (JWT). JWT is an open, industry-standard (RFC 7519) for
# representing claims securely between two parties.
# https://pyjwt.readthedocs.io/en/stable/
pyjwt = {extras = ["crypto"], version = "<3", optional = true}
# Python client for Sentry (https://sentry.io)
# https://pypi.org/project/sentry-sdk/
sentry-sdk = {version = "<3", optional = true}
# Python humanize functions
# https://python-humanize.readthedocs.io/en/latest/
humanize = {version = "<5", optional = true}

[tool.poetry.extras]
all = ["pyjwt", "sentry-sdk", "humanize"]
jwt = ["pyjwt"]
sentry = ["sentry-sdk"]
s3 = ["humanize"]

[tool.poetry.group.dev.dependencies]
# TODO: move it to optional once released
# Tools For Sqlalchemy Used By Saritasa
# https://github.com/saritasa-nest/saritasa-sqlalchemy-tools
saritasa-sqlalchemy-tools = {git = "https://github.com/saritasa-nest/saritasa-sqlalchemy-tools.git", extras = ["auto_schema"], rev = "main"}
# Tools For S3 Used By Saritasa
# https://github.com/saritasa-nest/saritasa-s3-tools
saritasa-s3-tools = {git = "https://github.com/saritasa-nest/saritasa-s3-tools.git", extras = ["async", "factory"], rev = "main"}
# HTTPX is a fully featured HTTP client for Python 3, which provides sync and async APIs, and support for both HTTP/1.1 and HTTP/2.
# https://www.python-httpx.org/
httpx = {version ="^0.27.0"}
# Improved REPL
ipdb = "^0.13.13"
ipython = "^8.26.0"
# A framework for managing and maintaining multi-language pre-commit hooks.
# https://pre-commit.com/
pre-commit = "^3.7.1"
# Collection of invoke commands used by Saritasa
# Invoke is a Python (2.7 and 3.4+) task execution tool & library,
# drawing inspiration from various sources to arrive at a powerful & clean feature set.
# http://www.pyinvoke.org/
# https://github.com/saritasa-nest/saritasa-python-invocations/
saritasa_invocations = "^1.1.1"
# Uvicorn is an ASGI web server implementation for Python.
# Used for launching example app
# https://www.uvicorn.org/
uvicorn = "^0.30.1"

[tool.poetry.group.linters.dependencies]
# Mypy is a static type checker for Python.
# https://mypy.readthedocs.io/en/stable/
mypy = "^1.10.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
# To prettify pytest output
pytest-sugar = "^1.0.0"
# Coverage.py is a tool for measuring code coverage of Python programs.
# It monitors your program, noting which parts of the code have been executed,
# then analyzes the source to identify code that could have been executed but was not.
# https://coverage.readthedocs.io/en/latest/
coverage = "^7.6.0"
# Allows you to use fixtures in @pytest.mark.parametrize.
# https://pypi.org/project/pytest-lazy-fixtures/
pytest-lazy-fixtures = "^1.0.7"
# asyncpg is a database interface library designed specifically for PostgreSQL
# and Python/asyncio.
# https://magicstack.github.io/asyncpg/current/
asyncpg = "^0.29.0"
# Fast creating of model instances. May be used in tests
# https://factoryboy.readthedocs.io/en/stable/
factory-boy = "^3.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
extend-select = [
  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "W",
  "E",
  # https://docs.astral.sh/ruff/rules/#mccabe-c90
  "C90",
  # https://docs.astral.sh/ruff/rules/#isort-i
  "I",
  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "N",
  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "D",
  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "UP",
  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN",
  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "S",
  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "B",
  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "A",
  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "COM",
  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  "C4",
  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "DTZ",
  # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "T10",
  # https://docs.astral.sh/ruff/rules/#flake8-django-dj
  "DJ",
  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "T20",
  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "PT",
  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "SIM",
  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "PTH",
  # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "TD",
  # https://docs.astral.sh/ruff/rules/#eradicate-era
  "ERA",
  # https://docs.astral.sh/ruff/rules/#tryceratops-try
  "TRY",
  # https://docs.astral.sh/ruff/rules/#flynt-fly
  "FLY",
  # https://docs.astral.sh/ruff/rules/#perflint-perf
  "PERF",
  # https://docs.astral.sh/ruff/rules/#refurb-furb
  "FURB",
  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "PIE",
  # https://docs.astral.sh/ruff/rules/#flake8-async-async
  "ASYNC",
  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "RUF",
]
ignore = [
  # https://docs.astral.sh/ruff/rules/missing-type-self
  "ANN101",
  # https://docs.astral.sh/ruff/rules/missing-type-cls
  "ANN102",
  # https://docs.astral.sh/ruff/rules/any-type
  "ANN401",
  # https://docs.astral.sh/ruff/rules/missing-type-kwargs
  "ANN003",
  # https://docs.astral.sh/ruff/rules/undocumented-public-module
  "D100",
  # https://docs.astral.sh/ruff/rules/undocumented-public-package
  "D104",
  # https://docs.astral.sh/ruff/rules/undocumented-public-nested-class
  "D106",
  # https://docs.astral.sh/ruff/rules/undocumented-public-init
  "D107",
  # https://docs.astral.sh/ruff/rules/commented-out-code/
  "ERA001",
  # https://docs.astral.sh/ruff/rules/assignment-in-assert/
  "RUF018",
  # https://docs.astral.sh/ruff/rules/raise-vanilla-args
  "TRY003",
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  # https://docs.astral.sh/ruff/rules/unused-import
  "F401",
]
"**/tests/*" = [
  # https://docs.astral.sh/ruff/rules/assert
  "S101",
  # https://docs.astral.sh/ruff/rules/hardcoded-password-func-arg
  "S106",
  # https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage
  "S311",
]
"**/test_*" = [
  # https://docs.astral.sh/ruff/rules/missing-return-type-undocumented-public-function
  "ANN201",
]
"**/testing.py*" = [
  # https://docs.astral.sh/ruff/rules/assert
  "S101",
]
"**/testing/**" = [
  # https://docs.astral.sh/ruff/rules/assert
  "S101",
]
[tool.ruff.lint.isort]
force-wrap-aliases = true
split-on-trailing-comma = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "list"
parametrize-values-type = "list"
parametrize-values-row-type = "list"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
plugins = []
# https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
ignore_missing_imports = true
strict = false
warn_no_return = false
check_untyped_defs = true
disallow_any_generics = true
exclude = [
  "venv",
  ".venv",
]
disable_error_code = [
  # Mypy demands that all typing as variable would have type of TypeAlias,
  # but it's not allowed to be done as function argument, which we are using a
  # lot in API
  "valid-type",
]

[[tool.mypy.overrides]]
module = "tests/*"
disable_error_code = [
  "attr-defined",
  "operator",
]

[tool.pyright]
ignore = [
  # Disabled for tests because of dynamic nature of pytest
  "**/test_*.py",
  "invocations/**"
]

[tool.pytest.ini_options]
# --capture=no
#   allow use of ipdb during tests
# --ff
#   run last failed tests first
addopts = [
    "--capture=no",
    "--ff",
]
# skip all files inside following dirs
norecursedirs = [
    "venv",
    ".venv",
    "example_app",
]
# Configutation for fastapi
fastapi_app_path="example_app.fastapi_app"
# Configuration for database
sqlalchemy_database_driver="postgresql+asyncpg"
sqlalchemy_username="fastapi-rest-framework-user"
sqlalchemy_password="manager"
sqlalchemy_host="postgres"
# Configuration for s3
s3_endpoint_url = "https://localhost.localstack.cloud:4566"
s3_region="us-west-1"
s3_access_key="root"
s3_secret_key="rootroot"

[tool.coverage.run]
omit = []

[tool.coverage.report]
include = ["fastapi_rest_framework/**"]

# https://docformatter.readthedocs.io/en/latest/configuration.html#
[tool.docformatter]
wrap-descriptions=0
in-place=true
blank=true
black=true
